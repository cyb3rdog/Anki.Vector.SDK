// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: anki_vector/messaging/settings.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Anki.Vector.ExternalInterface {

  /// <summary>Holder for reflection information generated from anki_vector/messaging/settings.proto</summary>
  public static partial class SettingsReflection {

    #region Descriptor
    /// <summary>File descriptor for anki_vector/messaging/settings.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static SettingsReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CiRhbmtpX3ZlY3Rvci9tZXNzYWdpbmcvc2V0dGluZ3MucHJvdG8SHkFua2ku",
            "VmVjdG9yLmV4dGVybmFsX2ludGVyZmFjZRorYW5raV92ZWN0b3IvbWVzc2Fn",
            "aW5nL3Jlc3BvbnNlX3N0YXR1cy5wcm90byLiAgoTUm9ib3RTZXR0aW5nc0Nv",
            "bmZpZxIVCg1jbG9ja18yNF9ob3VyGAEgASgIEjsKCWV5ZV9jb2xvchgCIAEo",
            "DjIoLkFua2kuVmVjdG9yLmV4dGVybmFsX2ludGVyZmFjZS5FeWVDb2xvchIY",
            "ChBkZWZhdWx0X2xvY2F0aW9uGAMgASgJEhYKDmRpc3RfaXNfbWV0cmljGAQg",
            "ASgIEg4KBmxvY2FsZRgFIAEoCRI9Cg1tYXN0ZXJfdm9sdW1lGAYgASgOMiYu",
            "QW5raS5WZWN0b3IuZXh0ZXJuYWxfaW50ZXJmYWNlLlZvbHVtZRIaChJ0ZW1w",
            "X2lzX2ZhaHJlbmhlaXQYByABKAgSEQoJdGltZV96b25lGAggASgJEkcKD2J1",
            "dHRvbl93YWtld29yZBgJIAEoDjIuLkFua2kuVmVjdG9yLmV4dGVybmFsX2lu",
            "dGVyZmFjZS5CdXR0b25XYWtlV29yZCJ1ChVBY2NvdW50U2V0dGluZ3NDb25m",
            "aWcSGQoPZGF0YV9jb2xsZWN0aW9uGAEgASgISAASFAoKYXBwX2xvY2FsZRgC",
            "IAEoCUgBQhcKFW9uZW9mX2RhdGFfY29sbGVjdGlvbkISChBvbmVvZl9hcHBf",
            "bG9jYWxlIk4KFlVzZXJFbnRpdGxlbWVudHNDb25maWcSGgoQa2lja3N0YXJ0",
            "ZXJfZXllcxgBIAEoCEgAQhgKFm9uZW9mX2tpY2tzdGFydGVyX2V5ZXMiWwoE",
            "SmRvYxITCgtkb2NfdmVyc2lvbhgBIAEoBBITCgtmbXRfdmVyc2lvbhgCIAEo",
            "BBIXCg9jbGllbnRfbWV0YWRhdGEYAyABKAkSEAoIanNvbl9kb2MYBCABKAki",
            "ewoJTmFtZWRKZG9jEjsKCWpkb2NfdHlwZRgBIAEoDjIoLkFua2kuVmVjdG9y",
            "LmV4dGVybmFsX2ludGVyZmFjZS5KZG9jVHlwZRIxCgNkb2MYAiABKAsyJC5B",
            "bmtpLlZlY3Rvci5leHRlcm5hbF9pbnRlcmZhY2UuSmRvYyJQChBQdWxsSmRv",
            "Y3NSZXF1ZXN0EjwKCmpkb2NfdHlwZXMYASADKA4yKC5BbmtpLlZlY3Rvci5l",
            "eHRlcm5hbF9pbnRlcmZhY2UuSmRvY1R5cGUikwEKEVB1bGxKZG9jc1Jlc3Bv",
            "bnNlEj4KBnN0YXR1cxgBIAEoCzIuLkFua2kuVmVjdG9yLmV4dGVybmFsX2lu",
            "dGVyZmFjZS5SZXNwb25zZVN0YXR1cxI+CgtuYW1lZF9qZG9jcxgCIAMoCzIp",
            "LkFua2kuVmVjdG9yLmV4dGVybmFsX2ludGVyZmFjZS5OYW1lZEpkb2MiXgoV",
            "VXBkYXRlU2V0dGluZ3NSZXF1ZXN0EkUKCHNldHRpbmdzGAEgASgLMjMuQW5r",
            "aS5WZWN0b3IuZXh0ZXJuYWxfaW50ZXJmYWNlLlJvYm90U2V0dGluZ3NDb25m",
            "aWcixQEKFlVwZGF0ZVNldHRpbmdzUmVzcG9uc2USPgoGc3RhdHVzGAEgASgL",
            "Mi4uQW5raS5WZWN0b3IuZXh0ZXJuYWxfaW50ZXJmYWNlLlJlc3BvbnNlU3Rh",
            "dHVzEjgKBGNvZGUYAiABKA4yKi5BbmtpLlZlY3Rvci5leHRlcm5hbF9pbnRl",
            "cmZhY2UuUmVzdWx0Q29kZRIxCgNkb2MYAyABKAsyJC5BbmtpLlZlY3Rvci5l",
            "eHRlcm5hbF9pbnRlcmZhY2UuSmRvYyJvChxVcGRhdGVBY2NvdW50U2V0dGlu",
            "Z3NSZXF1ZXN0Ek8KEGFjY291bnRfc2V0dGluZ3MYASABKAsyNS5BbmtpLlZl",
            "Y3Rvci5leHRlcm5hbF9pbnRlcmZhY2UuQWNjb3VudFNldHRpbmdzQ29uZmln",
            "IswBCh1VcGRhdGVBY2NvdW50U2V0dGluZ3NSZXNwb25zZRI+CgZzdGF0dXMY",
            "ASABKAsyLi5BbmtpLlZlY3Rvci5leHRlcm5hbF9pbnRlcmZhY2UuUmVzcG9u",
            "c2VTdGF0dXMSOAoEY29kZRgCIAEoDjIqLkFua2kuVmVjdG9yLmV4dGVybmFs",
            "X2ludGVyZmFjZS5SZXN1bHRDb2RlEjEKA2RvYxgDIAEoCzIkLkFua2kuVmVj",
            "dG9yLmV4dGVybmFsX2ludGVyZmFjZS5KZG9jInIKHVVwZGF0ZVVzZXJFbnRp",
            "dGxlbWVudHNSZXF1ZXN0ElEKEXVzZXJfZW50aXRsZW1lbnRzGAEgASgLMjYu",
            "QW5raS5WZWN0b3IuZXh0ZXJuYWxfaW50ZXJmYWNlLlVzZXJFbnRpdGxlbWVu",
            "dHNDb25maWcizQEKHlVwZGF0ZVVzZXJFbnRpdGxlbWVudHNSZXNwb25zZRI+",
            "CgZzdGF0dXMYASABKAsyLi5BbmtpLlZlY3Rvci5leHRlcm5hbF9pbnRlcmZh",
            "Y2UuUmVzcG9uc2VTdGF0dXMSOAoEY29kZRgCIAEoDjIqLkFua2kuVmVjdG9y",
            "LmV4dGVybmFsX2ludGVyZmFjZS5SZXN1bHRDb2RlEjEKA2RvYxgDIAEoCzIk",
            "LkFua2kuVmVjdG9yLmV4dGVybmFsX2ludGVyZmFjZS5KZG9jIkwKDEpkb2Nz",
            "Q2hhbmdlZBI8CgpqZG9jX3R5cGVzGAEgAygOMiguQW5raS5WZWN0b3IuZXh0",
            "ZXJuYWxfaW50ZXJmYWNlLkpkb2NUeXBlKiUKCkFwaVZlcnNpb24SCwoHSU5W",
            "QUxJRBAAEgoKBkxBVEVTVBABKlIKBlZvbHVtZRIICgRNVVRFEAASBwoDTE9X",
            "EAESDgoKTUVESVVNX0xPVxACEgoKBk1FRElVTRADEg8KC01FRElVTV9ISUdI",
            "EAQSCAoESElHSBAFKmUKCEpkb2NUeXBlEhIKDlJPQk9UX1NFVFRJTkdTEAAS",
            "GAoUUk9CT1RfTElGRVRJTUVfU1RBVFMQARIUChBBQ0NPVU5UX1NFVFRJTkdT",
            "EAISFQoRVVNFUl9FTlRJVExFTUVOVFMQAyo7ChFKZG9jUmVzb2x2ZU1ldGhv",
            "ZBIRCg1QVVNIX1RPX0NMT1VEEAASEwoPUFVMTF9GUk9NX0NMT1VEEAEqtQEK",
            "DFJvYm90U2V0dGluZxIRCg1jbG9ja18yNF9ob3VyEAASDQoJZXllX2NvbG9y",
            "EAESFAoQZGVmYXVsdF9sb2NhdGlvbhACEhIKDmRpc3RfaXNfbWV0cmljEAMS",
            "CgoGbG9jYWxlEAQSEQoNbWFzdGVyX3ZvbHVtZRAFEhYKEnRlbXBfaXNfZmFo",
            "cmVuaGVpdBAGEg0KCXRpbWVfem9uZRAHEhMKD2J1dHRvbl93YWtld29yZBAI",
            "KqsBCghFeWVDb2xvchIRCg1USVBfT1ZFUl9URUFMEAASEgoOT1ZFUkZJVF9P",
            "UkFOR0UQARISCg5VTkNBTk5ZX1lFTExPVxACEhMKD05PTl9MSU5FQVJfTElN",
            "RRADEhgKFFNJTkdVTEFSSVRZX1NBUFBISVJFEAQSGQoVRkFMU0VfUE9TSVRJ",
            "VkVfUFVSUExFEAUSGgoWQ09ORlVTSU9OX01BVFJJWF9HUkVFThAGKksKDkJ1",
            "dHRvbldha2VXb3JkEh4KGkJVVFRPTl9XQUtFV09SRF9IRVlfVkVDVE9SEAAS",
            "GQoVQlVUVE9OX1dBS0VXT1JEX0FMRVhBEAEqNQoOQWNjb3VudFNldHRpbmcS",
            "EwoPREFUQV9DT0xMRUNUSU9OEAASDgoKQVBQX0xPQ0FMRRABKicKD1VzZXJF",
            "bnRpdGxlbWVudBIUChBLSUNLU1RBUlRFUl9FWUVTEAAqQQoKUmVzdWx0Q29k",
            "ZRIVChFTRVRUSU5HU19BQ0NFUFRFRBAAEhwKGEVSUk9SX1VQREFURV9JTl9Q",
            "Uk9HUkVTUxABYgZwcm90bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Anki.Vector.ExternalInterface.ResponseStatusReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(new[] {typeof(global::Anki.Vector.ExternalInterface.ApiVersion), typeof(global::Anki.Vector.ExternalInterface.Volume), typeof(global::Anki.Vector.ExternalInterface.JdocType), typeof(global::Anki.Vector.ExternalInterface.JdocResolveMethod), typeof(global::Anki.Vector.ExternalInterface.RobotSetting), typeof(global::Anki.Vector.ExternalInterface.EyeColor), typeof(global::Anki.Vector.ExternalInterface.ButtonWakeWord), typeof(global::Anki.Vector.ExternalInterface.AccountSetting), typeof(global::Anki.Vector.ExternalInterface.UserEntitlement), typeof(global::Anki.Vector.ExternalInterface.ResultCode), }, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Anki.Vector.ExternalInterface.RobotSettingsConfig), global::Anki.Vector.ExternalInterface.RobotSettingsConfig.Parser, new[]{ "Clock24Hour", "EyeColor", "DefaultLocation", "DistIsMetric", "Locale", "MasterVolume", "TempIsFahrenheit", "TimeZone", "ButtonWakeword" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Anki.Vector.ExternalInterface.AccountSettingsConfig), global::Anki.Vector.ExternalInterface.AccountSettingsConfig.Parser, new[]{ "DataCollection", "AppLocale" }, new[]{ "OneofDataCollection", "OneofAppLocale" }, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Anki.Vector.ExternalInterface.UserEntitlementsConfig), global::Anki.Vector.ExternalInterface.UserEntitlementsConfig.Parser, new[]{ "KickstarterEyes" }, new[]{ "OneofKickstarterEyes" }, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Anki.Vector.ExternalInterface.Jdoc), global::Anki.Vector.ExternalInterface.Jdoc.Parser, new[]{ "DocVersion", "FmtVersion", "ClientMetadata", "JsonDoc" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Anki.Vector.ExternalInterface.NamedJdoc), global::Anki.Vector.ExternalInterface.NamedJdoc.Parser, new[]{ "JdocType", "Doc" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Anki.Vector.ExternalInterface.PullJdocsRequest), global::Anki.Vector.ExternalInterface.PullJdocsRequest.Parser, new[]{ "JdocTypes" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Anki.Vector.ExternalInterface.PullJdocsResponse), global::Anki.Vector.ExternalInterface.PullJdocsResponse.Parser, new[]{ "Status", "NamedJdocs" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Anki.Vector.ExternalInterface.UpdateSettingsRequest), global::Anki.Vector.ExternalInterface.UpdateSettingsRequest.Parser, new[]{ "Settings" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Anki.Vector.ExternalInterface.UpdateSettingsResponse), global::Anki.Vector.ExternalInterface.UpdateSettingsResponse.Parser, new[]{ "Status", "Code", "Doc" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Anki.Vector.ExternalInterface.UpdateAccountSettingsRequest), global::Anki.Vector.ExternalInterface.UpdateAccountSettingsRequest.Parser, new[]{ "AccountSettings" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Anki.Vector.ExternalInterface.UpdateAccountSettingsResponse), global::Anki.Vector.ExternalInterface.UpdateAccountSettingsResponse.Parser, new[]{ "Status", "Code", "Doc" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Anki.Vector.ExternalInterface.UpdateUserEntitlementsRequest), global::Anki.Vector.ExternalInterface.UpdateUserEntitlementsRequest.Parser, new[]{ "UserEntitlements" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Anki.Vector.ExternalInterface.UpdateUserEntitlementsResponse), global::Anki.Vector.ExternalInterface.UpdateUserEntitlementsResponse.Parser, new[]{ "Status", "Code", "Doc" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Anki.Vector.ExternalInterface.JdocsChanged), global::Anki.Vector.ExternalInterface.JdocsChanged.Parser, new[]{ "JdocTypes" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Enums
  public enum ApiVersion {
    [pbr::OriginalName("INVALID")] Invalid = 0,
    [pbr::OriginalName("LATEST")] Latest = 1,
  }

  public enum Volume {
    [pbr::OriginalName("MUTE")] Mute = 0,
    [pbr::OriginalName("LOW")] Low = 1,
    [pbr::OriginalName("MEDIUM_LOW")] MediumLow = 2,
    [pbr::OriginalName("MEDIUM")] Medium = 3,
    [pbr::OriginalName("MEDIUM_HIGH")] MediumHigh = 4,
    [pbr::OriginalName("HIGH")] High = 5,
  }

  public enum JdocType {
    [pbr::OriginalName("ROBOT_SETTINGS")] RobotSettings = 0,
    [pbr::OriginalName("ROBOT_LIFETIME_STATS")] RobotLifetimeStats = 1,
    [pbr::OriginalName("ACCOUNT_SETTINGS")] AccountSettings = 2,
    [pbr::OriginalName("USER_ENTITLEMENTS")] UserEntitlements = 3,
  }

  public enum JdocResolveMethod {
    [pbr::OriginalName("PUSH_TO_CLOUD")] PushToCloud = 0,
    [pbr::OriginalName("PULL_FROM_CLOUD")] PullFromCloud = 1,
  }

  public enum RobotSetting {
    [pbr::OriginalName("clock_24_hour")] Clock24Hour = 0,
    [pbr::OriginalName("eye_color")] EyeColor = 1,
    [pbr::OriginalName("default_location")] DefaultLocation = 2,
    [pbr::OriginalName("dist_is_metric")] DistIsMetric = 3,
    [pbr::OriginalName("locale")] Locale = 4,
    [pbr::OriginalName("master_volume")] MasterVolume = 5,
    [pbr::OriginalName("temp_is_fahrenheit")] TempIsFahrenheit = 6,
    [pbr::OriginalName("time_zone")] TimeZone = 7,
    [pbr::OriginalName("button_wakeword")] ButtonWakeword = 8,
  }

  public enum EyeColor {
    [pbr::OriginalName("TIP_OVER_TEAL")] TipOverTeal = 0,
    [pbr::OriginalName("OVERFIT_ORANGE")] OverfitOrange = 1,
    [pbr::OriginalName("UNCANNY_YELLOW")] UncannyYellow = 2,
    [pbr::OriginalName("NON_LINEAR_LIME")] NonLinearLime = 3,
    [pbr::OriginalName("SINGULARITY_SAPPHIRE")] SingularitySapphire = 4,
    [pbr::OriginalName("FALSE_POSITIVE_PURPLE")] FalsePositivePurple = 5,
    [pbr::OriginalName("CONFUSION_MATRIX_GREEN")] ConfusionMatrixGreen = 6,
  }

  public enum ButtonWakeWord {
    [pbr::OriginalName("BUTTON_WAKEWORD_HEY_VECTOR")] HeyVector = 0,
    [pbr::OriginalName("BUTTON_WAKEWORD_ALEXA")] Alexa = 1,
  }

  public enum AccountSetting {
    [pbr::OriginalName("DATA_COLLECTION")] DataCollection = 0,
    [pbr::OriginalName("APP_LOCALE")] AppLocale = 1,
  }

  public enum UserEntitlement {
    [pbr::OriginalName("KICKSTARTER_EYES")] KickstarterEyes = 0,
  }

  public enum ResultCode {
    [pbr::OriginalName("SETTINGS_ACCEPTED")] SettingsAccepted = 0,
    [pbr::OriginalName("ERROR_UPDATE_IN_PROGRESS")] ErrorUpdateInProgress = 1,
  }

  #endregion

  #region Messages
  /// <summary>
  /// Updated by wayne@codaris.com
  /// </summary>
  public sealed partial class RobotSettingsConfig : pb::IMessage<RobotSettingsConfig> {
    private static readonly pb::MessageParser<RobotSettingsConfig> _parser = new pb::MessageParser<RobotSettingsConfig>(() => new RobotSettingsConfig());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RobotSettingsConfig> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Anki.Vector.ExternalInterface.SettingsReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RobotSettingsConfig() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RobotSettingsConfig(RobotSettingsConfig other) : this() {
      clock24Hour_ = other.clock24Hour_;
      eyeColor_ = other.eyeColor_;
      defaultLocation_ = other.defaultLocation_;
      distIsMetric_ = other.distIsMetric_;
      locale_ = other.locale_;
      masterVolume_ = other.masterVolume_;
      tempIsFahrenheit_ = other.tempIsFahrenheit_;
      timeZone_ = other.timeZone_;
      buttonWakeword_ = other.buttonWakeword_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RobotSettingsConfig Clone() {
      return new RobotSettingsConfig(this);
    }

    /// <summary>Field number for the "clock_24_hour" field.</summary>
    public const int Clock24HourFieldNumber = 1;
    private bool clock24Hour_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Clock24Hour {
      get { return clock24Hour_; }
      set {
        clock24Hour_ = value;
      }
    }

    /// <summary>Field number for the "eye_color" field.</summary>
    public const int EyeColorFieldNumber = 2;
    private global::Anki.Vector.ExternalInterface.EyeColor eyeColor_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Anki.Vector.ExternalInterface.EyeColor EyeColor {
      get { return eyeColor_; }
      set {
        eyeColor_ = value;
      }
    }

    /// <summary>Field number for the "default_location" field.</summary>
    public const int DefaultLocationFieldNumber = 3;
    private string defaultLocation_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string DefaultLocation {
      get { return defaultLocation_; }
      set {
        defaultLocation_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "dist_is_metric" field.</summary>
    public const int DistIsMetricFieldNumber = 4;
    private bool distIsMetric_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool DistIsMetric {
      get { return distIsMetric_; }
      set {
        distIsMetric_ = value;
      }
    }

    /// <summary>Field number for the "locale" field.</summary>
    public const int LocaleFieldNumber = 5;
    private string locale_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Locale {
      get { return locale_; }
      set {
        locale_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "master_volume" field.</summary>
    public const int MasterVolumeFieldNumber = 6;
    private global::Anki.Vector.ExternalInterface.Volume masterVolume_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Anki.Vector.ExternalInterface.Volume MasterVolume {
      get { return masterVolume_; }
      set {
        masterVolume_ = value;
      }
    }

    /// <summary>Field number for the "temp_is_fahrenheit" field.</summary>
    public const int TempIsFahrenheitFieldNumber = 7;
    private bool tempIsFahrenheit_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool TempIsFahrenheit {
      get { return tempIsFahrenheit_; }
      set {
        tempIsFahrenheit_ = value;
      }
    }

    /// <summary>Field number for the "time_zone" field.</summary>
    public const int TimeZoneFieldNumber = 8;
    private string timeZone_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string TimeZone {
      get { return timeZone_; }
      set {
        timeZone_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "button_wakeword" field.</summary>
    public const int ButtonWakewordFieldNumber = 9;
    private global::Anki.Vector.ExternalInterface.ButtonWakeWord buttonWakeword_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Anki.Vector.ExternalInterface.ButtonWakeWord ButtonWakeword {
      get { return buttonWakeword_; }
      set {
        buttonWakeword_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RobotSettingsConfig);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RobotSettingsConfig other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Clock24Hour != other.Clock24Hour) return false;
      if (EyeColor != other.EyeColor) return false;
      if (DefaultLocation != other.DefaultLocation) return false;
      if (DistIsMetric != other.DistIsMetric) return false;
      if (Locale != other.Locale) return false;
      if (MasterVolume != other.MasterVolume) return false;
      if (TempIsFahrenheit != other.TempIsFahrenheit) return false;
      if (TimeZone != other.TimeZone) return false;
      if (ButtonWakeword != other.ButtonWakeword) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Clock24Hour != false) hash ^= Clock24Hour.GetHashCode();
      if (EyeColor != 0) hash ^= EyeColor.GetHashCode();
      if (DefaultLocation.Length != 0) hash ^= DefaultLocation.GetHashCode();
      if (DistIsMetric != false) hash ^= DistIsMetric.GetHashCode();
      if (Locale.Length != 0) hash ^= Locale.GetHashCode();
      if (MasterVolume != 0) hash ^= MasterVolume.GetHashCode();
      if (TempIsFahrenheit != false) hash ^= TempIsFahrenheit.GetHashCode();
      if (TimeZone.Length != 0) hash ^= TimeZone.GetHashCode();
      if (ButtonWakeword != 0) hash ^= ButtonWakeword.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Clock24Hour != false) {
        output.WriteRawTag(8);
        output.WriteBool(Clock24Hour);
      }
      if (EyeColor != 0) {
        output.WriteRawTag(16);
        output.WriteEnum((int) EyeColor);
      }
      if (DefaultLocation.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(DefaultLocation);
      }
      if (DistIsMetric != false) {
        output.WriteRawTag(32);
        output.WriteBool(DistIsMetric);
      }
      if (Locale.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(Locale);
      }
      if (MasterVolume != 0) {
        output.WriteRawTag(48);
        output.WriteEnum((int) MasterVolume);
      }
      if (TempIsFahrenheit != false) {
        output.WriteRawTag(56);
        output.WriteBool(TempIsFahrenheit);
      }
      if (TimeZone.Length != 0) {
        output.WriteRawTag(66);
        output.WriteString(TimeZone);
      }
      if (ButtonWakeword != 0) {
        output.WriteRawTag(72);
        output.WriteEnum((int) ButtonWakeword);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Clock24Hour != false) {
        size += 1 + 1;
      }
      if (EyeColor != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) EyeColor);
      }
      if (DefaultLocation.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(DefaultLocation);
      }
      if (DistIsMetric != false) {
        size += 1 + 1;
      }
      if (Locale.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Locale);
      }
      if (MasterVolume != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) MasterVolume);
      }
      if (TempIsFahrenheit != false) {
        size += 1 + 1;
      }
      if (TimeZone.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(TimeZone);
      }
      if (ButtonWakeword != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) ButtonWakeword);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RobotSettingsConfig other) {
      if (other == null) {
        return;
      }
      if (other.Clock24Hour != false) {
        Clock24Hour = other.Clock24Hour;
      }
      if (other.EyeColor != 0) {
        EyeColor = other.EyeColor;
      }
      if (other.DefaultLocation.Length != 0) {
        DefaultLocation = other.DefaultLocation;
      }
      if (other.DistIsMetric != false) {
        DistIsMetric = other.DistIsMetric;
      }
      if (other.Locale.Length != 0) {
        Locale = other.Locale;
      }
      if (other.MasterVolume != 0) {
        MasterVolume = other.MasterVolume;
      }
      if (other.TempIsFahrenheit != false) {
        TempIsFahrenheit = other.TempIsFahrenheit;
      }
      if (other.TimeZone.Length != 0) {
        TimeZone = other.TimeZone;
      }
      if (other.ButtonWakeword != 0) {
        ButtonWakeword = other.ButtonWakeword;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Clock24Hour = input.ReadBool();
            break;
          }
          case 16: {
            eyeColor_ = (global::Anki.Vector.ExternalInterface.EyeColor) input.ReadEnum();
            break;
          }
          case 26: {
            DefaultLocation = input.ReadString();
            break;
          }
          case 32: {
            DistIsMetric = input.ReadBool();
            break;
          }
          case 42: {
            Locale = input.ReadString();
            break;
          }
          case 48: {
            masterVolume_ = (global::Anki.Vector.ExternalInterface.Volume) input.ReadEnum();
            break;
          }
          case 56: {
            TempIsFahrenheit = input.ReadBool();
            break;
          }
          case 66: {
            TimeZone = input.ReadString();
            break;
          }
          case 72: {
            buttonWakeword_ = (global::Anki.Vector.ExternalInterface.ButtonWakeWord) input.ReadEnum();
            break;
          }
        }
      }
    }

  }

  public sealed partial class AccountSettingsConfig : pb::IMessage<AccountSettingsConfig> {
    private static readonly pb::MessageParser<AccountSettingsConfig> _parser = new pb::MessageParser<AccountSettingsConfig>(() => new AccountSettingsConfig());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AccountSettingsConfig> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Anki.Vector.ExternalInterface.SettingsReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AccountSettingsConfig() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AccountSettingsConfig(AccountSettingsConfig other) : this() {
      switch (other.OneofDataCollectionCase) {
        case OneofDataCollectionOneofCase.DataCollection:
          DataCollection = other.DataCollection;
          break;
      }

      switch (other.OneofAppLocaleCase) {
        case OneofAppLocaleOneofCase.AppLocale:
          AppLocale = other.AppLocale;
          break;
      }

      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AccountSettingsConfig Clone() {
      return new AccountSettingsConfig(this);
    }

    /// <summary>Field number for the "data_collection" field.</summary>
    public const int DataCollectionFieldNumber = 1;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool DataCollection {
      get { return oneofDataCollectionCase_ == OneofDataCollectionOneofCase.DataCollection ? (bool) oneofDataCollection_ : false; }
      set {
        oneofDataCollection_ = value;
        oneofDataCollectionCase_ = OneofDataCollectionOneofCase.DataCollection;
      }
    }

    /// <summary>Field number for the "app_locale" field.</summary>
    public const int AppLocaleFieldNumber = 2;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string AppLocale {
      get { return oneofAppLocaleCase_ == OneofAppLocaleOneofCase.AppLocale ? (string) oneofAppLocale_ : ""; }
      set {
        oneofAppLocale_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
        oneofAppLocaleCase_ = OneofAppLocaleOneofCase.AppLocale;
      }
    }

    private object oneofDataCollection_;
    /// <summary>Enum of possible cases for the "oneof_data_collection" oneof.</summary>
    public enum OneofDataCollectionOneofCase {
      None = 0,
      DataCollection = 1,
    }
    private OneofDataCollectionOneofCase oneofDataCollectionCase_ = OneofDataCollectionOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public OneofDataCollectionOneofCase OneofDataCollectionCase {
      get { return oneofDataCollectionCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearOneofDataCollection() {
      oneofDataCollectionCase_ = OneofDataCollectionOneofCase.None;
      oneofDataCollection_ = null;
    }

    private object oneofAppLocale_;
    /// <summary>Enum of possible cases for the "oneof_app_locale" oneof.</summary>
    public enum OneofAppLocaleOneofCase {
      None = 0,
      AppLocale = 2,
    }
    private OneofAppLocaleOneofCase oneofAppLocaleCase_ = OneofAppLocaleOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public OneofAppLocaleOneofCase OneofAppLocaleCase {
      get { return oneofAppLocaleCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearOneofAppLocale() {
      oneofAppLocaleCase_ = OneofAppLocaleOneofCase.None;
      oneofAppLocale_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AccountSettingsConfig);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AccountSettingsConfig other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (DataCollection != other.DataCollection) return false;
      if (AppLocale != other.AppLocale) return false;
      if (OneofDataCollectionCase != other.OneofDataCollectionCase) return false;
      if (OneofAppLocaleCase != other.OneofAppLocaleCase) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (oneofDataCollectionCase_ == OneofDataCollectionOneofCase.DataCollection) hash ^= DataCollection.GetHashCode();
      if (oneofAppLocaleCase_ == OneofAppLocaleOneofCase.AppLocale) hash ^= AppLocale.GetHashCode();
      hash ^= (int) oneofDataCollectionCase_;
      hash ^= (int) oneofAppLocaleCase_;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (oneofDataCollectionCase_ == OneofDataCollectionOneofCase.DataCollection) {
        output.WriteRawTag(8);
        output.WriteBool(DataCollection);
      }
      if (oneofAppLocaleCase_ == OneofAppLocaleOneofCase.AppLocale) {
        output.WriteRawTag(18);
        output.WriteString(AppLocale);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (oneofDataCollectionCase_ == OneofDataCollectionOneofCase.DataCollection) {
        size += 1 + 1;
      }
      if (oneofAppLocaleCase_ == OneofAppLocaleOneofCase.AppLocale) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(AppLocale);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AccountSettingsConfig other) {
      if (other == null) {
        return;
      }
      switch (other.OneofDataCollectionCase) {
        case OneofDataCollectionOneofCase.DataCollection:
          DataCollection = other.DataCollection;
          break;
      }

      switch (other.OneofAppLocaleCase) {
        case OneofAppLocaleOneofCase.AppLocale:
          AppLocale = other.AppLocale;
          break;
      }

      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            DataCollection = input.ReadBool();
            break;
          }
          case 18: {
            AppLocale = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class UserEntitlementsConfig : pb::IMessage<UserEntitlementsConfig> {
    private static readonly pb::MessageParser<UserEntitlementsConfig> _parser = new pb::MessageParser<UserEntitlementsConfig>(() => new UserEntitlementsConfig());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<UserEntitlementsConfig> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Anki.Vector.ExternalInterface.SettingsReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UserEntitlementsConfig() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UserEntitlementsConfig(UserEntitlementsConfig other) : this() {
      switch (other.OneofKickstarterEyesCase) {
        case OneofKickstarterEyesOneofCase.KickstarterEyes:
          KickstarterEyes = other.KickstarterEyes;
          break;
      }

      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UserEntitlementsConfig Clone() {
      return new UserEntitlementsConfig(this);
    }

    /// <summary>Field number for the "kickstarter_eyes" field.</summary>
    public const int KickstarterEyesFieldNumber = 1;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool KickstarterEyes {
      get { return oneofKickstarterEyesCase_ == OneofKickstarterEyesOneofCase.KickstarterEyes ? (bool) oneofKickstarterEyes_ : false; }
      set {
        oneofKickstarterEyes_ = value;
        oneofKickstarterEyesCase_ = OneofKickstarterEyesOneofCase.KickstarterEyes;
      }
    }

    private object oneofKickstarterEyes_;
    /// <summary>Enum of possible cases for the "oneof_kickstarter_eyes" oneof.</summary>
    public enum OneofKickstarterEyesOneofCase {
      None = 0,
      KickstarterEyes = 1,
    }
    private OneofKickstarterEyesOneofCase oneofKickstarterEyesCase_ = OneofKickstarterEyesOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public OneofKickstarterEyesOneofCase OneofKickstarterEyesCase {
      get { return oneofKickstarterEyesCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearOneofKickstarterEyes() {
      oneofKickstarterEyesCase_ = OneofKickstarterEyesOneofCase.None;
      oneofKickstarterEyes_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as UserEntitlementsConfig);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(UserEntitlementsConfig other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (KickstarterEyes != other.KickstarterEyes) return false;
      if (OneofKickstarterEyesCase != other.OneofKickstarterEyesCase) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (oneofKickstarterEyesCase_ == OneofKickstarterEyesOneofCase.KickstarterEyes) hash ^= KickstarterEyes.GetHashCode();
      hash ^= (int) oneofKickstarterEyesCase_;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (oneofKickstarterEyesCase_ == OneofKickstarterEyesOneofCase.KickstarterEyes) {
        output.WriteRawTag(8);
        output.WriteBool(KickstarterEyes);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (oneofKickstarterEyesCase_ == OneofKickstarterEyesOneofCase.KickstarterEyes) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(UserEntitlementsConfig other) {
      if (other == null) {
        return;
      }
      switch (other.OneofKickstarterEyesCase) {
        case OneofKickstarterEyesOneofCase.KickstarterEyes:
          KickstarterEyes = other.KickstarterEyes;
          break;
      }

      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            KickstarterEyes = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  public sealed partial class Jdoc : pb::IMessage<Jdoc> {
    private static readonly pb::MessageParser<Jdoc> _parser = new pb::MessageParser<Jdoc>(() => new Jdoc());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Jdoc> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Anki.Vector.ExternalInterface.SettingsReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Jdoc() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Jdoc(Jdoc other) : this() {
      docVersion_ = other.docVersion_;
      fmtVersion_ = other.fmtVersion_;
      clientMetadata_ = other.clientMetadata_;
      jsonDoc_ = other.jsonDoc_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Jdoc Clone() {
      return new Jdoc(this);
    }

    /// <summary>Field number for the "doc_version" field.</summary>
    public const int DocVersionFieldNumber = 1;
    private ulong docVersion_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong DocVersion {
      get { return docVersion_; }
      set {
        docVersion_ = value;
      }
    }

    /// <summary>Field number for the "fmt_version" field.</summary>
    public const int FmtVersionFieldNumber = 2;
    private ulong fmtVersion_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong FmtVersion {
      get { return fmtVersion_; }
      set {
        fmtVersion_ = value;
      }
    }

    /// <summary>Field number for the "client_metadata" field.</summary>
    public const int ClientMetadataFieldNumber = 3;
    private string clientMetadata_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ClientMetadata {
      get { return clientMetadata_; }
      set {
        clientMetadata_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "json_doc" field.</summary>
    public const int JsonDocFieldNumber = 4;
    private string jsonDoc_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string JsonDoc {
      get { return jsonDoc_; }
      set {
        jsonDoc_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Jdoc);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Jdoc other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (DocVersion != other.DocVersion) return false;
      if (FmtVersion != other.FmtVersion) return false;
      if (ClientMetadata != other.ClientMetadata) return false;
      if (JsonDoc != other.JsonDoc) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (DocVersion != 0UL) hash ^= DocVersion.GetHashCode();
      if (FmtVersion != 0UL) hash ^= FmtVersion.GetHashCode();
      if (ClientMetadata.Length != 0) hash ^= ClientMetadata.GetHashCode();
      if (JsonDoc.Length != 0) hash ^= JsonDoc.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (DocVersion != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(DocVersion);
      }
      if (FmtVersion != 0UL) {
        output.WriteRawTag(16);
        output.WriteUInt64(FmtVersion);
      }
      if (ClientMetadata.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(ClientMetadata);
      }
      if (JsonDoc.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(JsonDoc);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (DocVersion != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(DocVersion);
      }
      if (FmtVersion != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(FmtVersion);
      }
      if (ClientMetadata.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ClientMetadata);
      }
      if (JsonDoc.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(JsonDoc);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Jdoc other) {
      if (other == null) {
        return;
      }
      if (other.DocVersion != 0UL) {
        DocVersion = other.DocVersion;
      }
      if (other.FmtVersion != 0UL) {
        FmtVersion = other.FmtVersion;
      }
      if (other.ClientMetadata.Length != 0) {
        ClientMetadata = other.ClientMetadata;
      }
      if (other.JsonDoc.Length != 0) {
        JsonDoc = other.JsonDoc;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            DocVersion = input.ReadUInt64();
            break;
          }
          case 16: {
            FmtVersion = input.ReadUInt64();
            break;
          }
          case 26: {
            ClientMetadata = input.ReadString();
            break;
          }
          case 34: {
            JsonDoc = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class NamedJdoc : pb::IMessage<NamedJdoc> {
    private static readonly pb::MessageParser<NamedJdoc> _parser = new pb::MessageParser<NamedJdoc>(() => new NamedJdoc());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<NamedJdoc> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Anki.Vector.ExternalInterface.SettingsReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NamedJdoc() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NamedJdoc(NamedJdoc other) : this() {
      jdocType_ = other.jdocType_;
      doc_ = other.doc_ != null ? other.doc_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NamedJdoc Clone() {
      return new NamedJdoc(this);
    }

    /// <summary>Field number for the "jdoc_type" field.</summary>
    public const int JdocTypeFieldNumber = 1;
    private global::Anki.Vector.ExternalInterface.JdocType jdocType_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Anki.Vector.ExternalInterface.JdocType JdocType {
      get { return jdocType_; }
      set {
        jdocType_ = value;
      }
    }

    /// <summary>Field number for the "doc" field.</summary>
    public const int DocFieldNumber = 2;
    private global::Anki.Vector.ExternalInterface.Jdoc doc_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Anki.Vector.ExternalInterface.Jdoc Doc {
      get { return doc_; }
      set {
        doc_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as NamedJdoc);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(NamedJdoc other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (JdocType != other.JdocType) return false;
      if (!object.Equals(Doc, other.Doc)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (JdocType != 0) hash ^= JdocType.GetHashCode();
      if (doc_ != null) hash ^= Doc.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (JdocType != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) JdocType);
      }
      if (doc_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Doc);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (JdocType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) JdocType);
      }
      if (doc_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Doc);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(NamedJdoc other) {
      if (other == null) {
        return;
      }
      if (other.JdocType != 0) {
        JdocType = other.JdocType;
      }
      if (other.doc_ != null) {
        if (doc_ == null) {
          doc_ = new global::Anki.Vector.ExternalInterface.Jdoc();
        }
        Doc.MergeFrom(other.Doc);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            jdocType_ = (global::Anki.Vector.ExternalInterface.JdocType) input.ReadEnum();
            break;
          }
          case 18: {
            if (doc_ == null) {
              doc_ = new global::Anki.Vector.ExternalInterface.Jdoc();
            }
            input.ReadMessage(doc_);
            break;
          }
        }
      }
    }

  }

  public sealed partial class PullJdocsRequest : pb::IMessage<PullJdocsRequest> {
    private static readonly pb::MessageParser<PullJdocsRequest> _parser = new pb::MessageParser<PullJdocsRequest>(() => new PullJdocsRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PullJdocsRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Anki.Vector.ExternalInterface.SettingsReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PullJdocsRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PullJdocsRequest(PullJdocsRequest other) : this() {
      jdocTypes_ = other.jdocTypes_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PullJdocsRequest Clone() {
      return new PullJdocsRequest(this);
    }

    /// <summary>Field number for the "jdoc_types" field.</summary>
    public const int JdocTypesFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Anki.Vector.ExternalInterface.JdocType> _repeated_jdocTypes_codec
        = pb::FieldCodec.ForEnum(10, x => (int) x, x => (global::Anki.Vector.ExternalInterface.JdocType) x);
    private readonly pbc::RepeatedField<global::Anki.Vector.ExternalInterface.JdocType> jdocTypes_ = new pbc::RepeatedField<global::Anki.Vector.ExternalInterface.JdocType>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Anki.Vector.ExternalInterface.JdocType> JdocTypes {
      get { return jdocTypes_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PullJdocsRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PullJdocsRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!jdocTypes_.Equals(other.jdocTypes_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= jdocTypes_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      jdocTypes_.WriteTo(output, _repeated_jdocTypes_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += jdocTypes_.CalculateSize(_repeated_jdocTypes_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PullJdocsRequest other) {
      if (other == null) {
        return;
      }
      jdocTypes_.Add(other.jdocTypes_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10:
          case 8: {
            jdocTypes_.AddEntriesFrom(input, _repeated_jdocTypes_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class PullJdocsResponse : pb::IMessage<PullJdocsResponse> {
    private static readonly pb::MessageParser<PullJdocsResponse> _parser = new pb::MessageParser<PullJdocsResponse>(() => new PullJdocsResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PullJdocsResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Anki.Vector.ExternalInterface.SettingsReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PullJdocsResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PullJdocsResponse(PullJdocsResponse other) : this() {
      status_ = other.status_ != null ? other.status_.Clone() : null;
      namedJdocs_ = other.namedJdocs_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PullJdocsResponse Clone() {
      return new PullJdocsResponse(this);
    }

    /// <summary>Field number for the "status" field.</summary>
    public const int StatusFieldNumber = 1;
    private global::Anki.Vector.ExternalInterface.ResponseStatus status_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Anki.Vector.ExternalInterface.ResponseStatus Status {
      get { return status_; }
      set {
        status_ = value;
      }
    }

    /// <summary>Field number for the "named_jdocs" field.</summary>
    public const int NamedJdocsFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Anki.Vector.ExternalInterface.NamedJdoc> _repeated_namedJdocs_codec
        = pb::FieldCodec.ForMessage(18, global::Anki.Vector.ExternalInterface.NamedJdoc.Parser);
    private readonly pbc::RepeatedField<global::Anki.Vector.ExternalInterface.NamedJdoc> namedJdocs_ = new pbc::RepeatedField<global::Anki.Vector.ExternalInterface.NamedJdoc>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Anki.Vector.ExternalInterface.NamedJdoc> NamedJdocs {
      get { return namedJdocs_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PullJdocsResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PullJdocsResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Status, other.Status)) return false;
      if(!namedJdocs_.Equals(other.namedJdocs_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (status_ != null) hash ^= Status.GetHashCode();
      hash ^= namedJdocs_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (status_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Status);
      }
      namedJdocs_.WriteTo(output, _repeated_namedJdocs_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (status_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Status);
      }
      size += namedJdocs_.CalculateSize(_repeated_namedJdocs_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PullJdocsResponse other) {
      if (other == null) {
        return;
      }
      if (other.status_ != null) {
        if (status_ == null) {
          status_ = new global::Anki.Vector.ExternalInterface.ResponseStatus();
        }
        Status.MergeFrom(other.Status);
      }
      namedJdocs_.Add(other.namedJdocs_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (status_ == null) {
              status_ = new global::Anki.Vector.ExternalInterface.ResponseStatus();
            }
            input.ReadMessage(status_);
            break;
          }
          case 18: {
            namedJdocs_.AddEntriesFrom(input, _repeated_namedJdocs_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class UpdateSettingsRequest : pb::IMessage<UpdateSettingsRequest> {
    private static readonly pb::MessageParser<UpdateSettingsRequest> _parser = new pb::MessageParser<UpdateSettingsRequest>(() => new UpdateSettingsRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<UpdateSettingsRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Anki.Vector.ExternalInterface.SettingsReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UpdateSettingsRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UpdateSettingsRequest(UpdateSettingsRequest other) : this() {
      settings_ = other.settings_ != null ? other.settings_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UpdateSettingsRequest Clone() {
      return new UpdateSettingsRequest(this);
    }

    /// <summary>Field number for the "settings" field.</summary>
    public const int SettingsFieldNumber = 1;
    private global::Anki.Vector.ExternalInterface.RobotSettingsConfig settings_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Anki.Vector.ExternalInterface.RobotSettingsConfig Settings {
      get { return settings_; }
      set {
        settings_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as UpdateSettingsRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(UpdateSettingsRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Settings, other.Settings)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (settings_ != null) hash ^= Settings.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (settings_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Settings);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (settings_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Settings);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(UpdateSettingsRequest other) {
      if (other == null) {
        return;
      }
      if (other.settings_ != null) {
        if (settings_ == null) {
          settings_ = new global::Anki.Vector.ExternalInterface.RobotSettingsConfig();
        }
        Settings.MergeFrom(other.Settings);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (settings_ == null) {
              settings_ = new global::Anki.Vector.ExternalInterface.RobotSettingsConfig();
            }
            input.ReadMessage(settings_);
            break;
          }
        }
      }
    }

  }

  public sealed partial class UpdateSettingsResponse : pb::IMessage<UpdateSettingsResponse> {
    private static readonly pb::MessageParser<UpdateSettingsResponse> _parser = new pb::MessageParser<UpdateSettingsResponse>(() => new UpdateSettingsResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<UpdateSettingsResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Anki.Vector.ExternalInterface.SettingsReflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UpdateSettingsResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UpdateSettingsResponse(UpdateSettingsResponse other) : this() {
      status_ = other.status_ != null ? other.status_.Clone() : null;
      code_ = other.code_;
      doc_ = other.doc_ != null ? other.doc_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UpdateSettingsResponse Clone() {
      return new UpdateSettingsResponse(this);
    }

    /// <summary>Field number for the "status" field.</summary>
    public const int StatusFieldNumber = 1;
    private global::Anki.Vector.ExternalInterface.ResponseStatus status_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Anki.Vector.ExternalInterface.ResponseStatus Status {
      get { return status_; }
      set {
        status_ = value;
      }
    }

    /// <summary>Field number for the "code" field.</summary>
    public const int CodeFieldNumber = 2;
    private global::Anki.Vector.ExternalInterface.ResultCode code_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Anki.Vector.ExternalInterface.ResultCode Code {
      get { return code_; }
      set {
        code_ = value;
      }
    }

    /// <summary>Field number for the "doc" field.</summary>
    public const int DocFieldNumber = 3;
    private global::Anki.Vector.ExternalInterface.Jdoc doc_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Anki.Vector.ExternalInterface.Jdoc Doc {
      get { return doc_; }
      set {
        doc_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as UpdateSettingsResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(UpdateSettingsResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Status, other.Status)) return false;
      if (Code != other.Code) return false;
      if (!object.Equals(Doc, other.Doc)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (status_ != null) hash ^= Status.GetHashCode();
      if (Code != 0) hash ^= Code.GetHashCode();
      if (doc_ != null) hash ^= Doc.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (status_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Status);
      }
      if (Code != 0) {
        output.WriteRawTag(16);
        output.WriteEnum((int) Code);
      }
      if (doc_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Doc);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (status_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Status);
      }
      if (Code != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Code);
      }
      if (doc_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Doc);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(UpdateSettingsResponse other) {
      if (other == null) {
        return;
      }
      if (other.status_ != null) {
        if (status_ == null) {
          status_ = new global::Anki.Vector.ExternalInterface.ResponseStatus();
        }
        Status.MergeFrom(other.Status);
      }
      if (other.Code != 0) {
        Code = other.Code;
      }
      if (other.doc_ != null) {
        if (doc_ == null) {
          doc_ = new global::Anki.Vector.ExternalInterface.Jdoc();
        }
        Doc.MergeFrom(other.Doc);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (status_ == null) {
              status_ = new global::Anki.Vector.ExternalInterface.ResponseStatus();
            }
            input.ReadMessage(status_);
            break;
          }
          case 16: {
            code_ = (global::Anki.Vector.ExternalInterface.ResultCode) input.ReadEnum();
            break;
          }
          case 26: {
            if (doc_ == null) {
              doc_ = new global::Anki.Vector.ExternalInterface.Jdoc();
            }
            input.ReadMessage(doc_);
            break;
          }
        }
      }
    }

  }

  public sealed partial class UpdateAccountSettingsRequest : pb::IMessage<UpdateAccountSettingsRequest> {
    private static readonly pb::MessageParser<UpdateAccountSettingsRequest> _parser = new pb::MessageParser<UpdateAccountSettingsRequest>(() => new UpdateAccountSettingsRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<UpdateAccountSettingsRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Anki.Vector.ExternalInterface.SettingsReflection.Descriptor.MessageTypes[9]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UpdateAccountSettingsRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UpdateAccountSettingsRequest(UpdateAccountSettingsRequest other) : this() {
      accountSettings_ = other.accountSettings_ != null ? other.accountSettings_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UpdateAccountSettingsRequest Clone() {
      return new UpdateAccountSettingsRequest(this);
    }

    /// <summary>Field number for the "account_settings" field.</summary>
    public const int AccountSettingsFieldNumber = 1;
    private global::Anki.Vector.ExternalInterface.AccountSettingsConfig accountSettings_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Anki.Vector.ExternalInterface.AccountSettingsConfig AccountSettings {
      get { return accountSettings_; }
      set {
        accountSettings_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as UpdateAccountSettingsRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(UpdateAccountSettingsRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(AccountSettings, other.AccountSettings)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (accountSettings_ != null) hash ^= AccountSettings.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (accountSettings_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(AccountSettings);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (accountSettings_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(AccountSettings);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(UpdateAccountSettingsRequest other) {
      if (other == null) {
        return;
      }
      if (other.accountSettings_ != null) {
        if (accountSettings_ == null) {
          accountSettings_ = new global::Anki.Vector.ExternalInterface.AccountSettingsConfig();
        }
        AccountSettings.MergeFrom(other.AccountSettings);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (accountSettings_ == null) {
              accountSettings_ = new global::Anki.Vector.ExternalInterface.AccountSettingsConfig();
            }
            input.ReadMessage(accountSettings_);
            break;
          }
        }
      }
    }

  }

  public sealed partial class UpdateAccountSettingsResponse : pb::IMessage<UpdateAccountSettingsResponse> {
    private static readonly pb::MessageParser<UpdateAccountSettingsResponse> _parser = new pb::MessageParser<UpdateAccountSettingsResponse>(() => new UpdateAccountSettingsResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<UpdateAccountSettingsResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Anki.Vector.ExternalInterface.SettingsReflection.Descriptor.MessageTypes[10]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UpdateAccountSettingsResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UpdateAccountSettingsResponse(UpdateAccountSettingsResponse other) : this() {
      status_ = other.status_ != null ? other.status_.Clone() : null;
      code_ = other.code_;
      doc_ = other.doc_ != null ? other.doc_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UpdateAccountSettingsResponse Clone() {
      return new UpdateAccountSettingsResponse(this);
    }

    /// <summary>Field number for the "status" field.</summary>
    public const int StatusFieldNumber = 1;
    private global::Anki.Vector.ExternalInterface.ResponseStatus status_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Anki.Vector.ExternalInterface.ResponseStatus Status {
      get { return status_; }
      set {
        status_ = value;
      }
    }

    /// <summary>Field number for the "code" field.</summary>
    public const int CodeFieldNumber = 2;
    private global::Anki.Vector.ExternalInterface.ResultCode code_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Anki.Vector.ExternalInterface.ResultCode Code {
      get { return code_; }
      set {
        code_ = value;
      }
    }

    /// <summary>Field number for the "doc" field.</summary>
    public const int DocFieldNumber = 3;
    private global::Anki.Vector.ExternalInterface.Jdoc doc_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Anki.Vector.ExternalInterface.Jdoc Doc {
      get { return doc_; }
      set {
        doc_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as UpdateAccountSettingsResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(UpdateAccountSettingsResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Status, other.Status)) return false;
      if (Code != other.Code) return false;
      if (!object.Equals(Doc, other.Doc)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (status_ != null) hash ^= Status.GetHashCode();
      if (Code != 0) hash ^= Code.GetHashCode();
      if (doc_ != null) hash ^= Doc.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (status_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Status);
      }
      if (Code != 0) {
        output.WriteRawTag(16);
        output.WriteEnum((int) Code);
      }
      if (doc_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Doc);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (status_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Status);
      }
      if (Code != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Code);
      }
      if (doc_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Doc);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(UpdateAccountSettingsResponse other) {
      if (other == null) {
        return;
      }
      if (other.status_ != null) {
        if (status_ == null) {
          status_ = new global::Anki.Vector.ExternalInterface.ResponseStatus();
        }
        Status.MergeFrom(other.Status);
      }
      if (other.Code != 0) {
        Code = other.Code;
      }
      if (other.doc_ != null) {
        if (doc_ == null) {
          doc_ = new global::Anki.Vector.ExternalInterface.Jdoc();
        }
        Doc.MergeFrom(other.Doc);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (status_ == null) {
              status_ = new global::Anki.Vector.ExternalInterface.ResponseStatus();
            }
            input.ReadMessage(status_);
            break;
          }
          case 16: {
            code_ = (global::Anki.Vector.ExternalInterface.ResultCode) input.ReadEnum();
            break;
          }
          case 26: {
            if (doc_ == null) {
              doc_ = new global::Anki.Vector.ExternalInterface.Jdoc();
            }
            input.ReadMessage(doc_);
            break;
          }
        }
      }
    }

  }

  public sealed partial class UpdateUserEntitlementsRequest : pb::IMessage<UpdateUserEntitlementsRequest> {
    private static readonly pb::MessageParser<UpdateUserEntitlementsRequest> _parser = new pb::MessageParser<UpdateUserEntitlementsRequest>(() => new UpdateUserEntitlementsRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<UpdateUserEntitlementsRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Anki.Vector.ExternalInterface.SettingsReflection.Descriptor.MessageTypes[11]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UpdateUserEntitlementsRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UpdateUserEntitlementsRequest(UpdateUserEntitlementsRequest other) : this() {
      userEntitlements_ = other.userEntitlements_ != null ? other.userEntitlements_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UpdateUserEntitlementsRequest Clone() {
      return new UpdateUserEntitlementsRequest(this);
    }

    /// <summary>Field number for the "user_entitlements" field.</summary>
    public const int UserEntitlementsFieldNumber = 1;
    private global::Anki.Vector.ExternalInterface.UserEntitlementsConfig userEntitlements_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Anki.Vector.ExternalInterface.UserEntitlementsConfig UserEntitlements {
      get { return userEntitlements_; }
      set {
        userEntitlements_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as UpdateUserEntitlementsRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(UpdateUserEntitlementsRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(UserEntitlements, other.UserEntitlements)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (userEntitlements_ != null) hash ^= UserEntitlements.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (userEntitlements_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(UserEntitlements);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (userEntitlements_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(UserEntitlements);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(UpdateUserEntitlementsRequest other) {
      if (other == null) {
        return;
      }
      if (other.userEntitlements_ != null) {
        if (userEntitlements_ == null) {
          userEntitlements_ = new global::Anki.Vector.ExternalInterface.UserEntitlementsConfig();
        }
        UserEntitlements.MergeFrom(other.UserEntitlements);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (userEntitlements_ == null) {
              userEntitlements_ = new global::Anki.Vector.ExternalInterface.UserEntitlementsConfig();
            }
            input.ReadMessage(userEntitlements_);
            break;
          }
        }
      }
    }

  }

  public sealed partial class UpdateUserEntitlementsResponse : pb::IMessage<UpdateUserEntitlementsResponse> {
    private static readonly pb::MessageParser<UpdateUserEntitlementsResponse> _parser = new pb::MessageParser<UpdateUserEntitlementsResponse>(() => new UpdateUserEntitlementsResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<UpdateUserEntitlementsResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Anki.Vector.ExternalInterface.SettingsReflection.Descriptor.MessageTypes[12]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UpdateUserEntitlementsResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UpdateUserEntitlementsResponse(UpdateUserEntitlementsResponse other) : this() {
      status_ = other.status_ != null ? other.status_.Clone() : null;
      code_ = other.code_;
      doc_ = other.doc_ != null ? other.doc_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UpdateUserEntitlementsResponse Clone() {
      return new UpdateUserEntitlementsResponse(this);
    }

    /// <summary>Field number for the "status" field.</summary>
    public const int StatusFieldNumber = 1;
    private global::Anki.Vector.ExternalInterface.ResponseStatus status_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Anki.Vector.ExternalInterface.ResponseStatus Status {
      get { return status_; }
      set {
        status_ = value;
      }
    }

    /// <summary>Field number for the "code" field.</summary>
    public const int CodeFieldNumber = 2;
    private global::Anki.Vector.ExternalInterface.ResultCode code_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Anki.Vector.ExternalInterface.ResultCode Code {
      get { return code_; }
      set {
        code_ = value;
      }
    }

    /// <summary>Field number for the "doc" field.</summary>
    public const int DocFieldNumber = 3;
    private global::Anki.Vector.ExternalInterface.Jdoc doc_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Anki.Vector.ExternalInterface.Jdoc Doc {
      get { return doc_; }
      set {
        doc_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as UpdateUserEntitlementsResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(UpdateUserEntitlementsResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Status, other.Status)) return false;
      if (Code != other.Code) return false;
      if (!object.Equals(Doc, other.Doc)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (status_ != null) hash ^= Status.GetHashCode();
      if (Code != 0) hash ^= Code.GetHashCode();
      if (doc_ != null) hash ^= Doc.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (status_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Status);
      }
      if (Code != 0) {
        output.WriteRawTag(16);
        output.WriteEnum((int) Code);
      }
      if (doc_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Doc);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (status_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Status);
      }
      if (Code != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Code);
      }
      if (doc_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Doc);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(UpdateUserEntitlementsResponse other) {
      if (other == null) {
        return;
      }
      if (other.status_ != null) {
        if (status_ == null) {
          status_ = new global::Anki.Vector.ExternalInterface.ResponseStatus();
        }
        Status.MergeFrom(other.Status);
      }
      if (other.Code != 0) {
        Code = other.Code;
      }
      if (other.doc_ != null) {
        if (doc_ == null) {
          doc_ = new global::Anki.Vector.ExternalInterface.Jdoc();
        }
        Doc.MergeFrom(other.Doc);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (status_ == null) {
              status_ = new global::Anki.Vector.ExternalInterface.ResponseStatus();
            }
            input.ReadMessage(status_);
            break;
          }
          case 16: {
            code_ = (global::Anki.Vector.ExternalInterface.ResultCode) input.ReadEnum();
            break;
          }
          case 26: {
            if (doc_ == null) {
              doc_ = new global::Anki.Vector.ExternalInterface.Jdoc();
            }
            input.ReadMessage(doc_);
            break;
          }
        }
      }
    }

  }

  public sealed partial class JdocsChanged : pb::IMessage<JdocsChanged> {
    private static readonly pb::MessageParser<JdocsChanged> _parser = new pb::MessageParser<JdocsChanged>(() => new JdocsChanged());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<JdocsChanged> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Anki.Vector.ExternalInterface.SettingsReflection.Descriptor.MessageTypes[13]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public JdocsChanged() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public JdocsChanged(JdocsChanged other) : this() {
      jdocTypes_ = other.jdocTypes_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public JdocsChanged Clone() {
      return new JdocsChanged(this);
    }

    /// <summary>Field number for the "jdoc_types" field.</summary>
    public const int JdocTypesFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Anki.Vector.ExternalInterface.JdocType> _repeated_jdocTypes_codec
        = pb::FieldCodec.ForEnum(10, x => (int) x, x => (global::Anki.Vector.ExternalInterface.JdocType) x);
    private readonly pbc::RepeatedField<global::Anki.Vector.ExternalInterface.JdocType> jdocTypes_ = new pbc::RepeatedField<global::Anki.Vector.ExternalInterface.JdocType>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Anki.Vector.ExternalInterface.JdocType> JdocTypes {
      get { return jdocTypes_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as JdocsChanged);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(JdocsChanged other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!jdocTypes_.Equals(other.jdocTypes_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= jdocTypes_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      jdocTypes_.WriteTo(output, _repeated_jdocTypes_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += jdocTypes_.CalculateSize(_repeated_jdocTypes_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(JdocsChanged other) {
      if (other == null) {
        return;
      }
      jdocTypes_.Add(other.jdocTypes_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10:
          case 8: {
            jdocTypes_.AddEntriesFrom(input, _repeated_jdocTypes_codec);
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
